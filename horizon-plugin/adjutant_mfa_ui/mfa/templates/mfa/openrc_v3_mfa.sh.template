{% load shellfilter %}#!/usr/bin/env bash

# To use an OpenStack cloud you need to authenticate against the Identity
# service named keystone, which returns a **Token** and **Service Catalog**.
# The catalog contains the endpoints for all services the user/tenant has
# access to - such as Compute, Image Service, Identity, Object Storage, Block
# Storage, and Networking (code-named nova, glance, keystone, swift,
# cinder, and neutron).
#
# *NOTE*: Using the 3 *Identity API* does not necessarily mean any other
# OpenStack API is version 3. For example, your cloud provider may implement
# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
# only for the Identity API served through keystone.
export OS_AUTH_URL={{ auth_url }}

# With the addition of Keystone we have standardized on the term **project**
# as the entity that owns the resources.
export OS_PROJECT_ID={{ tenant_id }}
export OS_PROJECT_NAME="{{ tenant_name|shellfilter }}"
export OS_USER_DOMAIN_NAME="{{ user_domain_name|shellfilter }}"
if [ -z "$OS_USER_DOMAIN_NAME" ]; then unset OS_USER_DOMAIN_NAME; fi
export OS_PROJECT_DOMAIN_ID="{{ project_domain_id|shellfilter }}"
if [ -z "$OS_PROJECT_DOMAIN_ID" ]; then unset OS_PROJECT_DOMAIN_ID; fi

# unset v2.0 items in case set
unset OS_TENANT_ID
unset OS_TENANT_NAME

# In addition to the owning entity (tenant), OpenStack stores the entity
# performing the action as the **user**.
export OS_USERNAME="{{ user.username|shellfilter }}"

# If your configuration has multiple regions, we set that information here.
# OS_REGION_NAME is optional and only valid in certain environments.
export OS_REGION_NAME="{{ region|shellfilter }}"
# Don't leave a blank variable, unset it if it was empty
if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

export OS_IDENTITY_API_VERSION=3

# With Keystone you pass the keystone password.
echo "Please enter your OpenStack Password for project $OS_PROJECT_NAME as user $OS_USERNAME: "
read -sr OS_PASSWORD_INPUT

# With Keystone you pass the keystone passcode.
echo "Please enter your OpenStack MFA passcode (leave blank if not enabled): "
read OS_PASSCODE_INPUT

# make the passcode appended password
export OS_PASSWORD=$OS_PASSWORD_INPUT$OS_PASSCODE_INPUT

if [ -z "$OS_PASSCODE_INPUT" ]; then
    echo "If you wish to enable MFA please go to the settings tab on the dashboard."
fi
# clear the password/passcode values so they aren't in memory
unset OS_PASSWORD_INPUT
unset OS_PASSCODE_INPUT

# unset token auth variables just in case
unset OS_AUTH_TYPE
unset OS_TOKEN
unset OS_AUTH_TOKEN

# check which methods are currently available to get auth token from keystone
if hash openstack 2>/dev/null; then
    COMMAND="openstack"
elif hash wget 2>/dev/null; then
    COMMAND="wget"
elif hash curl 2>/dev/null; then
    COMMAND='curl'
fi

get_cloud_token (){

  if [ "$COMMAND" == "openstack" ]; then
    export OS_TOKEN=$(openstack token issue -f value -c id)
  elif [ $COMMAND == "wget" ]; then
    export OS_TOKEN=`wget -S -q -O - --header="Content-Type: application/json" --post-data '
    { "auth": {
        "identity": {
            "methods": ["password"],
            "password": {
              "user": {
                  "name": "'$OS_USERNAME'",
                  "domain": { "name": "'$OS_USER_DOMAIN_NAME'" },
                  "password": "'$OS_PASSWORD'"
              }
            }
          },
          "scope": {
              "project": {
                  "id": "'$OS_PROJECT_ID'"
              }
          }
        }
    }' $OS_AUTH_URL/auth/tokens 2>&1 | grep X-Subject-Token | awk '{print $2}'| tr '\r' ' '`
  elif [ $COMMAND == "curl" ]; then
    export OS_TOKEN=`curl -i -H "Content-Type: application/json" -d '
    { "auth": {
        "identity": {
            "methods": ["password"],
            "password": {
              "user": {
                  "name": "'$OS_USERNAME'",
                  "domain": { "name": "'$OS_USER_DOMAIN_NAME'" },
                  "password": "'$OS_PASSWORD'"
              }
            }
          },
          "scope": {
              "project": {
                  "id": "'$OS_PROJECT_ID'"
              }
          }
        }
    }' $OS_AUTH_URL/auth/tokens 2>&1 | grep X-Subject-Token | awk '{print $2}'| tr '\r' ' '| sed 's/[[:space:]]*$//'`
  fi

}

# generate token to use so that you will stay authenticated even when
# your TOTP password expires
get_cloud_token

if [ -z "$OS_TOKEN" ]; then
    echo "FAILED: OS_TOKEN was not setup, your passcode may have been incorrect."
else
    # unset all values not needed for token auth
    unset OS_USER_DOMAIN_NAME
    unset OS_USERNAME
    unset OS_PROJECT_DOMAIN_ID
    unset OS_PROJECT_NAME
    export OS_AUTH_TYPE="token"
    export OS_AUTH_TOKEN=$OS_TOKEN
    echo "OS_TOKEN and OS_AUTH_TOKEN have been set"
fi

# clear password
unset OS_PASSWORD
